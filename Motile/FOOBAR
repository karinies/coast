diff --git a/Motile/actor/promise.rkt b/Motile/actor/promise.rkt
index 2a0ac53..9d81bcc 100644
--- a/Motile/actor/promise.rkt
+++ b/Motile/actor/promise.rkt
@@ -135,6 +135,13 @@
        v))
     (else failure))) ; We lost patience.
 
+(define (promise/call p f patience failure)
+  (f (promise/wait p patience failure)))
+    
+
+
+
+
 ;; Given a local promise p construct a remote promise derived from p for another island.
 ;(define (promise/remote/new island clan actor p)
 ;  (and
@@ -143,7 +150,6 @@
 
 (define-values (PROMISSARY LOCATIVE/PROMISSARY) (actor/chieftain/new ROOT 'promissary))
 
-
 ;; The promissary is a unique clan responsible for the resolution of promises on the island.
 ;; When a promise/resolver pair (p . r) is created the promise id, p.id and the resolver r are
 ;; transmitted as a key/value pair p.id/r to the promissary which maintains a hash table whose keys are promise ids
diff --git a/Motile/actor/root.rkt b/Motile/actor/root.rkt
index c45a9d3..85df76b 100644
--- a/Motile/actor/root.rkt
+++ b/Motile/actor/root.rkt
@@ -1,5 +1,7 @@
 #lang racket/base
 
+;; DEPRECATED !!!!
+
 (require 
  (only-in "jumpstart.rkt" actor/root/new))
 
diff --git a/Motile/persistent/record.rkt b/Motile/persistent/record.rkt
index b5944c5..f69bd01 100644
--- a/Motile/persistent/record.rkt
+++ b/Motile/persistent/record.rkt
@@ -2,7 +2,7 @@
 
 (require
  (only-in racket/vector vector-copy)
- (only-in "../persistent/hash.rkt" hash/eq/null hash/keys hash/ref hash/contains?))
+ (only-in "../persistent/hash.rkt" hash/cons hash/eq/null hash/keys hash/ref hash/contains? vectors/hash))
 
 (provide
  ;; The following functions are exported for installation into the Motile baseline.
@@ -14,12 +14,17 @@
  record/unsign
   
  ;; The following functions are used only in Racket infrastructure code supporting Motile.
- ;; In particular (record ...0 and (record/cons ...) are implemented as special forms in the Motile compiler.
  record/raw/kind
  record/raw/hash
  record/raw/signature
  error/field/unknown
- error/unrecord)
+ error/unrecord
+ 
+ ;; The following functions are the Racket emulations of the base Motile record primitives.
+ record/new   ; Racket equivalent of Motile (record ...) special form.
+ record/cons  ; Racket equivalent of Motile (record/cons ...) special form.
+ record/ref   ; Racket equivalent of Motile (record/ref ....) special form
+)
  
 
 ;; Self-describing record sructure based on persistent hash tables.
@@ -70,46 +75,35 @@
 (define (error/unrecord use x)
   (error use "not a record ~s" x))
 
-;; All of this is an emulation of Racket records in the base Scheme.
-
-;(define-syntax record/new
-;  (syntax-rules ()
-;    [(_ name (field value) ...)
-;     (vector '<record> 'name (vector 'field ...) value ...)]))
-;
-;(define-syntax-rule (:: r field)
-;  (cond
-;    ((vector-memq 'field (record/tags r))
-;     => (lambda (i) (vector-ref r (+ 3 i))))
-;    (else (error/field/unknown 'record/ref r 'field))))
-;  
-;(define-syntax-rule (::? r field failure)
-;  (cond
-;    ((vector-memq 'field (record/tags r))
-;     => (lambda (i) (vector-ref r (+ 3 i))))
-;    (else failure)))
-;
-;(define (record/cons/field r field value)
-;  (cond
-;    ((vector-memq field (record/tags r))
-;     => (lambda (i)
-;          (let ((v (vector-copy r)))
-;            (vector-set! v (+ 3 i) value)
-;            v)))
-;    (else (error/field/unknown 'record/cons r field))))
-;
-;(define (record/cons/fields r fields values)
-;  (let loop ((v (vector-copy r)) (i 0) (n (vector-length fields)))
-;    (if (< i n)
-;        (cond
-;          ((vector-memq (vector-ref fields i) (record/tags r))
-;           => (lambda (j)
-;                (vector-set! v (+ 3 j) (vector-ref values i))
-;                (loop v (add1 i) n)))
-;          (else (error/field/unknown 'record/cons r (vector-ref fields i))))
-;        v)))
-;
-;(define-syntax record/cons
-;  (syntax-rules ()
-;    [(_ r (field value) ...) (record/cons/fields r (vector 'field ...) (vector value ...))]
-;    [(_ r field value) (record/cons/field r 'field value)]))
+;; All of this is an emulation of Motile records in the base Scheme.
+
+(define-syntax record/new
+  (syntax-rules ()
+    [(_ name (field value) ...)
+     (vector '<record> 'name (vectors/hash hash/eq/null (vector 'field ...) (vector value ...)) #f)]))
+
+(define-syntax record/cons
+  (syntax-rules ()
+    [(_ r (field value) ...) (record/cons/N r (vector 'field ...) (vector value ...))]
+    [(_ r field value)       (record/cons/1 r 'field value)]))
+
+(define (record/cons/1 r field value)
+  (vector '<record> (record/raw/kind r) (hash/cons (record/raw/hash r) field value) #f))
+
+(define (record/cons/N r fields values)
+  (vector '<record> (record/raw/kind r) (vectors/hash (record/raw/hash r) fields values) #f))
+
+(define-syntax record/ref
+  (syntax-rules ()
+    [(_ record field)
+     (if (hash/contains? (record/raw/hash record) 'field)
+         (hash/ref (record/raw/hash record) 'field #f)
+         (error 'record/ref "no field ~s in record ~s" 'field (record/raw/kind r)))]
+
+    [(_ record alpha beta ...)
+     (if (hash/contains? (record/raw/hash record) 'alpha)
+         (record/ref (hash/ref (record/raw/hash record) 'alpha #f) beta ...)
+         (error 'record/ref "no field ~s in record ~s" 'alpha (record/raw/kind r)))]
+
+     [(_ record field failure) (hash/ref (record/raw/hash record) 'field failure)]))
+
diff --git a/Motile/tests/compile-test.rkt b/Motile/tests/compile-test.rkt
index b22a631..78a83f8 100644
--- a/Motile/tests/compile-test.rkt
+++ b/Motile/tests/compile-test.rkt
@@ -314,6 +314,17 @@
         (* a b)))
 
     264))
+  
+  (test-case
+   "Translation of let into letrec*"
+   (check-equal?
+    ((compile/start
+      '(let ()
+         (define x 1)
+         (define y (+ x 7))
+         (+ x y))))
+    
+    9)) ; Expected.
 
   (test-case
    "Letrec* with one function definition"
